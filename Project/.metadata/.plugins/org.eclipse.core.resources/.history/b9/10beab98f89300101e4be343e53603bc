// @strict-types

#Область РасторгнутьАрендуТранспортаUseCase

// Расторгнуть аренду транспорта.
// 
// Параметры:
//  Запрос - Структура:
//  	* НомерАрендыТранспорта - Строка
// 
// Возвращаемое значение:
//  Структура - Ответ расторгнуть аренду транспорта:
// * ДокументСсылка - ДокументСсылка.АрендаПарка
// * АрендованныйПаркСсылка - СправочникСсылка.Парки
Функция РасторгнутьАрендуТранспорта(Запрос) Экспорт
	Попытка
		НомерАрендыТранспорта = Запрос.НомерАрендыТранспорта;
		Документ = ПолучитьАрендуТранспортаПоНомеру(НомерАрендыТранспорта);
		Если Документ = NULL Тогда
			ВызватьОшибкуНеНайденДокументАрендыТранспортаСКодом(НомерАрендыТранспорта);
		КонецЕсли;
		АрендованныйПарк = Документ.АрендованныйПарк;
		Если МодульПримитивовСервер.ОбъектNULLИлиНеопределено(АрендованныйПарк) Тогда
			ВызватьОшибкуОтсутствуетИнформацияОАрендованномПаркеДокумента();
		КонецЕсли;
		НачатьТранзакцию();
		АрендованныйПаркОбъект = АрендованныйПарк.ПолучитьОбъект();
		Документ.АрендованныйПарк = Неопределено;
		Документ.ДатаИстеченияДоговора = ТекущаяДата();
		ТранспортПарка = АрендованныйПарк.ТранспортПарка.Выгрузить();
		Для Каждого Транспорт Из ТранспортПарка Цикл
			ТранспортОбъект = Транспорт.Транспорт.Ссылка.ПолучитьОбъект();
			ТранспортОбъект.Удалить();
		КонецЦикла;		
		АрендованныйПаркОбъект.Удалить();
		Документ.Записать();
		ЗафиксироватьТранзакцию();
		Возврат ОтветРасторгнутьАрендуТранспорта(Документ, АрендованныйПаркОбъект);
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "Произошла ошибка во время транзакции расторжения аренды транспорта."
	КонецПопытки;
КонецФункции

// Ответ расторгнуть аренду транспорта.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.АрендаПарка
//  АрендованныйПаркОбъект - СправочникОбъект.Парки
// 
// Возвращаемое значение:
//  Структура - Ответ расторгнуть аренду транспорта:
// * ДокументСсылка - ДокументСсылка.АрендаПарка
// * АрендованныйПаркСсылка - СправочникСсылка.Парки
Функция ОтветРасторгнутьАрендуТранспорта(ДокументОбъект, АрендованныйПаркОбъект)
	Ответ = Новый Структура;
	Ответ.Вставить("ДокументСсылка", ДокументОбъект.Ссылка);
	Ответ.Вставить("АрендованныйПаркСсылка", АрендованныйПаркОбъект.Ссылка);
	Возврат Ответ;
КонецФункции

// Вызвать ошибку не найден документ аренды транспорта с кодом.
// 
// Параметры:
//  Код - Строка
Процедура ВызватьОшибкуНеНайденДокументАрендыТранспортаСКодом(Код)
	Шаблон = СтрШаблон("Не найдет документ аренды транспорта с номером: %1", Код);
	ВызватьИсключение Шаблон;
КонецПроцедуры

// Вызвать ошибку отсутствует информация о арендованном парке документа.
Процедура ВызватьОшибкуОтсутствуетИнформацияОАрендованномПаркеДокумента()
	Шаблон = СтрШаблон("Отсутствует информация аренды транспорта у документа
	|Возможно аренда была уже расторгнута.
	|Обатите внимание на дату окончания.");
	ВызватьИсключение Шаблон;
КонецПроцедуры

// Получить аренду транспорта по номеру.
// 
// Параметры:
//  НомерАрендыТранспорта - Строка
// 
// Возвращаемое значение:
//  Null, ДокументОбъект.АрендаПарка - Получить аренду транспорта по номеру
Функция ПолучитьАрендуТранспортаПоНомеру(НомерАрендыТранспорта)
	ЗапросВБазу = Новый Запрос;
	ЗапросВБазу.Текст = 
	"ВЫБРАТЬ Документы.Ссылка КАК ДокументСсылка
	|ИЗ Документ.АрендаПарка КАК Документы
	|ГДЕ Документы.Номер = &Номер;";
	ЗапросВБазу.УстановитьПараметр("Номер", НомерАрендыТранспорта);	
	РезультатЗапроса = ЗапросВБазу.Выполнить().Выбрать();
	Если Не РезультатЗапроса.Следующий() Тогда
		Возврат NULL;
	КонецЕсли;
	ДокументСсылка = РезультатЗапроса.ДокументСсылка;
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Возврат ДокументОбъект;
КонецФункции

#КонецОбласти