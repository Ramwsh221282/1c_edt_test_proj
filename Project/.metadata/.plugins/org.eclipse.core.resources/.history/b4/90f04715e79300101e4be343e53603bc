// @strict-types

#Область ПровестиУвольнениеСотрудникаUseCase

// Провести увольнение сотрудника.
// 
// Параметры:
//  Запрос - Структура:
// * ИдДокумента - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * Сотрудник - СправочникСсылка.Сотрудники
Функция ПровестиУвольнениеСотрудника(Запрос) Экспорт
	ДокументПриема = ПолучитьИнформациюОПриеме(Запрос.ИдДокумента);
	Уволенный = МодульСотрудникиВызовСервера.УволитьСотрудника(ДокументПриема.Документ);	
	ДокументПриема.Документ.ПолучитьОбъект().Удалить();
	Возврат УвольнениеСотрудникаОтвет(Уволенный);
КонецФункции

// Увольнение сотрудника ответ.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Структура:
//   * Сотрудник - СправочникСсылка.Сотрудники
Функция УвольнениеСотрудникаОтвет(Сотрудник)
	Ответ = новый Структура;
	Ответ.Вставить("Сотрудник", Сотрудник);
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область ПровестиПриемНаРаботуUseCase

// Провести прием на работу.
// 
// Параметры:
//  Запрос - Структура:
//   * ИдПриемаНаРаботу - Строка
// 
// Возвращаемое значение:
//  Структура - Ответ проведения приема на работу:
// * ПриемНаРаботу - ДокументОбъект.ПриемНаРаботу  
Функция ПровестиПриемНаРаботу(Запрос) Экспорт
	ПриемНаРаботу = ПолучитьИнформациюОПриеме(Запрос.ИдПриемаНаРаботу).Документ.ПолучитьОбъект();
	Если ПриемНаРаботу = NULL Тогда
		Ошибка = СтрШаблон("Документ приема на работу с ID %1 не найден.", Запрос.ИдПриемаНаРаботу);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	ПриемНаРаботу.Проведен = Истина;
	ПриемНаРаботу.Записать();
	Возврат ОтветПроведенияПриемаНаРаботу(ПриемНаРаботу);
КонецФункции

// Ответ проведения приема на работу.
// 
// Параметры:
//  ПриемНаРаботу - ДокументОбъект.ПриемНаРаботу
// 
// Возвращаемое значение:
//  Структура - Ответ проведения приема на работу:
// * ПриемНаРаботу - ДокументОбъект.ПриемНаРаботу
Функция ОтветПроведенияПриемаНаРаботу(ПриемНаРаботу)
	Ответ = новый Структура;
	Ответ.Вставить("ПриемНаРаботу", ПриемНаРаботу);
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область ПриемНаРаботуUseCase

// Принять на работу.
// 
// Параметры:
//  Запрос - Структура:
//  	* ИдФизическогоЛица - Строка
//  	* ИдДолжности - Строка
//  	* ДатаПриема - Дата
// Возвращаемое значение:
//  Структура - Создать ответ приема на работу:
// * ПриемНаРаботу - ДокументОбъект.ПриемНаРаботу
Функция ПринятьНаРаботу(Запрос) Экспорт
	ФизЛицо = МодульФизическиеЛицаВызовСервера.НайтиФизическоеЛицоПоId(Запрос.ИдФизическогоЛица);
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		ТекстОшибки = СтрШаблон("Физическое лицо с ID %1 не найдено.", Запрос.ИдФизическогоЛица);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;		
	Должность = МодульДолжностейВызовСервера.НайтиДолжностьПоId(Запрос.ИдДолжности);
	Если Не ЗначениеЗаполнено(Должность) Тогда
		ТекстОшибки = СтрШаблон("Должность с ID %1 не найдена.", Запрос.ИдДолжности);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	ПриемНаРаботу = СоздатьОбъектПриемаНаРаботу(ФизЛицо, Должность, Запрос.ДатаПриема);	
	Возврат СоздатьОтветПриемаНаРаботу(ПриемНаРаботу);
КонецФункции

// Создать ответ приема на работу.
// 
// Параметры:
//  ПриемНаРаботу - ДокументОбъект.ПриемНаРаботу
// 
// Возвращаемое значение:
//  Структура - Создать ответ приема на работу:
// * ПриемНаРаботу - ДокументОбъект.ПриемНаРаботу
Функция СоздатьОтветПриемаНаРаботу(ПриемНаРаботу)
	Ответ = Новый Структура;
	Ответ.Вставить("ПриемНаРаботу", ПриемНаРаботу);
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область ПолучитьИнформациюОПриемеНаРаботуUseCase

// Получить информацию о приеме.
// 
// Параметры:
//  ИдПриемаНаРаботу - Строка
// 
// Возвращаемое значение:
//  Null, Структура - Получить информацию о приеме:
// * Документ - ДокументСсылка.ПриемНаРаботу 
// * Должность - СправочникСсылка.Должности  
// * ФизЛицо - СправочникСсылка.ФизическиеЛица
Функция ПолучитьИнформациюОПриеме(ИдПриемаНаРаботу) Экспорт	
	Запрос = новый Запрос;
	Запрос.Текст =
	"
	|ВЫБРАТЬ 
	|ПринятияНаРаботу.Ссылка КАК Документ,
	|ПринятияНаРаботу.Должность.Ссылка КАК Должность,
	|ПринятияНаРаботу.ФизическоеЛицо КАК ФизЛицо
	|ИЗ Документ.ПриемНаРаботу КАК ПринятияНаРаботу
	|ГДЕ ПринятияНаРаботу.Номер = &Ид";
	Запрос.УстановитьПараметр("Ид", ИдПриемаНаРаботу);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если Не РезультатЗапроса.Следующий() Тогда
		Возврат Null;
	КонецЕсли;	
	Возврат ИнформацияОПриемеНаРаботу(
		РезультатЗапроса.Документ, 
		РезультатЗапроса.Должность,
		РезультатЗапроса.ФизЛицо
		);
КонецФункции

// Информация о приеме на работу.
// 
// Параметры:
//  Документ - ДокументСсылка.ПриемНаРаботу
//  Должность - СправочникСсылка.Должности
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Структура - Информация о приеме на работу:
// * Документ - ДокументСсылка.ПриемНаРаботу
// * Должность - СправочникСсылка.Должности
// * ФизЛицо - СправочникСсылка.ФизическиеЛица
Функция ИнформацияОПриемеНаРаботу(Документ, Должность, ФизЛицо)
	Информация = Новый Структура;
	Информация.Вставить("Документ", Документ);
	Информация.Вставить("Должность", Должность);
	Информация.Вставить("ФизЛицо", ФизЛицо);
	Возврат Информация;
КонецФункции

#КонецОбласти

#Область ОбъектПриемаНаРаботу

// Создать объект приема на работу.
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  Должность - СправочникСсылка.Должности
//  Дата - Дата
// 
// Возвращаемое значение:
//  ДокументОбъект.ПриемНаРаботу
Функция СоздатьОбъектПриемаНаРаботу(ФизЛицо, Должность, Дата)
	ПриемНаРаботу = Документы.ПриемНаРаботу.СоздатьДокумент();
	ПриемНаРаботу.Дата = Дата;
	ПриемНаРаботу.Номер = МодульПримитивовКлиентСервер.СгенерироватьGuid();
	ПриемНаРаботу.Должность = Должность;
	ПриемНаРаботу.ФизическоеЛицо = ФизЛицо;
	ПриемНаРаботу.Записать();
	Возврат ПриемНаРаботу;
КонецФункции

#КонецОбласти