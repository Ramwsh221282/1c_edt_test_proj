// @strict-types

#Область СохранитьТоварыСкладаUseCase

// Сохранить товары склада.
// 
// Параметры:
//  Запрос - Структура:
//  * СсылкаСклада - СправочникСсылка.Склады
//  * СписокТоваров - Массив из Структура:
//  ** СсылкаТовара - СправочникСсылка.Товар
//  ** ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
//  ** ЦенаПокупки - Число
//  ** ЦенаПродажи - Число
//  ** Спред - Число
//  ** Количество - Число
// Возвращаемое значение:
//  Структура - Ответ сохранить товары склада:
// * СкладСсылка - СправочникСсылка.Склады  
Функция СохранитьТоварыСклада(Запрос) Экспорт
	СкладОбъект = Запрос.СсылкаСклада.ПолучитьОбъект();
	МассивТоваров = Запрос.СписокТоваров;
	Если МассивТоваров.Количество() = 0 Тогда
		ВызватьИсключениеНечегоСохранятьНаСкладе();
	КонецЕсли;	
	ТекущиеТоварыСклада = СкладОбъект.ТоварыНаСкладе.Выгрузить();
	Для Каждого СохраняемыйТовар Из МассивТоваров Цикл
		Для Каждого ТекущийТовар Из ТекущиеТоварыСклада Цикл
			Если Не СуществующийТовар(ТекущийТовар, СохраняемыйТовар) Тогда
				ДобавитьТоварСкладу(ТекущиеТоварыСклада, СохраняемыйТовар);
				break;
			КонецЕсли;
			Если СтруктураТовараРавнаТоваруСклада(ТекущийТовар, СохраняемыйТовар) Тогда
				ПрименитьСтруктуруКТоваруСклада(ТекущийТовар, СохраняемыйТовар);				
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;		
	СкладОбъект.Записать();	
	Возврат ОтветСоздатьПустойСклад(СкладОбъект);
КонецФункции

// Ответ сохранить товары склада.
// 
// Параметры:
//  СкладОбъект - СправочникОбъект.Склады
// 
// Возвращаемое значение:
//  Структура - Ответ сохранить товары склада:
// * СкладСсылка - СправочникСсылка.Склады
Функция ОтветСохранитьТоварыСклада(СкладОбъект)
	Ответ = Новый Структура;
	Ответ.Вставить("СкладСсылка", СкладОбъект.Ссылка);
	Возврат Ответ;
КонецФункции

// Существующий Товар.
// 
// Параметры:
//  ТоварыСклада - ТаблицаЗначений:
// * Количество - Число
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * Спред - Число
// * Товар - СправочникСсылка.Товар
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
//  ТоварСтруктура - Структура:
// * СсылкаТовара - СправочникСсылка.Товар
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
// * Спред - Число
// * Количество - Число
Процедура ДобавитьТоварСкладу(ТоварыСклада, ТоварСтруктура)
	ДобавляемыйТовар = ТоварыСклада.Добавить();
	ДобавляемыйТовар.ЕдиницаИзмерения = ТоварСтруктура.ЕдиницаИзмерения;
	ДобавляемыйТовар.Количество = ТоварСтруктура.Количество;
	ДобавляемыйТовар.Спред = ТоварСтруктура.Спред;
	ДобавляемыйТовар.Товар = ТоварСтруктура.СсылкаТовара;
	ДобавляемыйТовар.ЦенаПокупки = ТоварСтруктура.ЦенаПокупки;
	ДобавляемыйТовар.ЦенаПродажи = ТоварСтруктура.ЦенаПродажи;	
КонецПроцедуры

// Существующий Товар.
// 
// Параметры:
//  ТоварСклада - СтрокаТаблицыЗначений:
// * Количество - Число
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * Спред - Число
// * Товар - СправочникСсылка.Товар
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
//  ТоварСтруктура - Структура:
// * СсылкаТовара - СправочникСсылка.Товар
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
// * Спред - Число
// * Количество - Число
// 
// Возвращаемое значение:
//  Булево - Структура товара равна товару склада
Функция СуществующийТовар(ТоварСклада, ТоварСтруктура)
	Возврат ТоварСклада.Товар = ТоварСтруктура.СсылкаТовара;
КонецФункции

// Структура Товара Равна Товару Склада.
// 
// Параметры:
//  ТоварСклада - СтрокаТаблицыЗначений:
// * Количество - Число
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * Спред - Число
// * Товар - СправочникСсылка.Товар
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
//  ТоварСтруктура - Структура:
// * СсылкаТовара - СправочникСсылка.Товар
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
// * Спред - Число
// * Количество - Число
// 
// Возвращаемое значение:
//  Булево - Структура товара равна товару склада
Функция СтруктураТовараРавнаТоваруСклада(ТоварСклада, ТоварСтруктура)
	Возврат ТоварСклада.Количество = ТоварСтруктура.Количество И
			ТоварСклада.ЕдиницаИзмерения = ТоварСтруктура.ЕдиницаИзмерения И
			ТоварСклада.Спред = ТоварСтруктура.Спред И
			ТоварСклада.Товар = ТоварСтруктура.СсылкаТовара И
			ТоварСклада.ЦенаПокупки = ТоварСтруктура.ЦенаПокупки И
			ТоварСклада.ЦенаПродажи = ТоварСтруктура.ЦенаПродажи					    
КонецФункции

// Применить Структуру К Товару Склада.
// 
// Параметры:
//  ТоварСклада - СтрокаТаблицыЗначений:
//  * Количество - Число
//  * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
//  * Спред - Число
//  * Товар - СправочникСсылка.Товар
//  * ЦенаПокупки- Число
//  * ЦенаПродажи - Число
//  ТоварСтруктура - Структура:
//  * СсылкаТовара - СправочникСсылка.Товар
//  * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
//  * ЦенаПокупки - Число
//  * ЦенаПродажи - Число
//  * Спред - Число
//  * Количество - Число
Процедура ПрименитьСтруктуруКТоваруСклада(ТоварСклада, ТоварСтруктура)
	ТоварСклада.ЕдиницаИзмерения = ТоварСтруктура.ЕдиницаИзмерения;
	ТоварСклада.Количество = ТоварСтруктура.Количество;
	ТоварСклада.Спред = ТоварСтруктура.Спред;
	ТоварСклада.Товар = ТоварСтруктура.СсылкаТовара;
	ТоварСклада.ЦенаПокупки = ТоварСтруктура.ЦенаПокупки;
	ТоварСклада.ЦенаПродажи = ТоварСтруктура.ЦенаПродажи;
КонецПроцедуры

Процедура ВызватьИсключениеНечегоСохранятьНаСкладе()
	Ошибка = "Для склада нечего сохранять в рамках товаров.";
	ВызватьИсключение Ошибка;
КонецПроцедуры

#КонецОбласти

#Область СоздатьПустойСкладUseCase

// Создать пустой склад сервер.
// 
// Параметры:
//  Запрос - Структура:
// * НаименованиеСклада - Строка
// * АдресСклада - Строка
// 
// Возвращаемое значение:
//  Структура - Ответ создать пустой склад:
// * СкладСсылка - СправочникСсылка.Склады  
Функция СоздатьПустойСкладСервер(Запрос) Экспорт
	НаименованиеСклада = Запрос.НаименованиеСклада;
	АдресСклада = Запрос.АдресСклада;
	Если ПустаяСтрока(НаименованиеСклада) Тогда
		ВызватьИсключениеПустоеНазваниеСклада();
	КонецЕсли;
	Если ПустаяСтрока(АдресСклада) Тогда
		ВызватьИсключениеПустойАдресСклада();
	КонецЕсли;
	ПроверитьСкладНаДубликат(НаименованиеСклада, АдресСклада);
	Склад = СоздатьОбъектПустойСклад(НаименованиеСклада, АдресСклада);
	Склад.Записать();
	Возврат ОтветСоздатьПустойСклад(Склад);
КонецФункции

// Ответ создать пустой склад.
// 
// Параметры:
//  Склад - СправочникОбъект.Склады
// 
// Возвращаемое значение:
//  Структура - Ответ создать пустой склад:
// * СкладСсылка - СправочникСсылка.Склады
Функция ОтветСоздатьПустойСклад(Склад)
	Ответ = Новый Структура;
	Ответ.Вставить("СкладСсылка", Склад.Ссылка);
	Возврат Ответ;
КонецФункции

// Проверить склад на дубликат.
// 
// Параметры:
//  НаименованиеСклада - Строка
//  АдресСклада - Строка
Процедура ПроверитьСкладНаДубликат(НаименованиеСклада, АдресСклада)	
	ЗапросВБазу = Новый Запрос;
	ЗапросВБазу.Текст = 
	"ВЫБРАТЬ 
	|Склады.Наименование КАК Наименование,
	|Склады.Адрес КАК Адрес
	|ИЗ Справочник.Склады КАК Склады
	|ГДЕ Склады.Наименование = &Наименование И Склады.Адрес = &Адрес";
	ЗапросВБазу.УстановитьПараметр("Наименование", НаименованиеСклада);
	ЗапросВБазу.УстановитьПараметр("Адрес", АдресСклада);
	РезультатЗапроса = ЗапросВБазу.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ВызватьИсключениеДубликатСкладаПоИмениИАдресу(НаименованиеСклада, АдресСклада);
	КонецЕсли;
КонецПроцедуры

// Вызвать исключение дубликат склада по имени и адресу.
// 
// Параметры:
//  НаименованиеСклада - Строка
//  АдресСклада - Строка
Процедура ВызватьИсключениеДубликатСкладаПоИмениИАдресу(НаименованиеСклада, АдресСклада)
	Ошибка = СтрШаблон("Склад с названием %1 и адресом %2 уже существует.", НаименованиеСклада, АдресСклада);
	ВызватьИсключение Ошибка;	
КонецПроцедуры

Процедура ВызватьИсключениеПустоеНазваниеСклада()
	Ошибка = "Название склада не было указано.";
	ВызватьИсключение(Ошибка);
КонецПроцедуры

Процедура ВызватьИсключениеПустойАдресСклада()
	Ошибка = "Адрес склада был пустым";
	ВызватьИсключение(Ошибка);
КонецПроцедуры

// Создать объект пустой склад.
// 
// Параметры:
//  НаименованиеСклада - Строка
//  АдресСклада - Строка
// 
// Возвращаемое значение:
//  СправочникОбъект.Склады - Создать объект пустой склад
Функция СоздатьОбъектПустойСклад(НаименованиеСклада, АдресСклада)
	Склад = Справочники.Склады.СоздатьЭлемент();
	Склад.Код = МодульПримитивовКлиентСервер.СгенерироватьGuid();
	Склад.Наименование = НаименованиеСклада;
	Склад.Адрес = АдресСклада;
	Склад.КоличествоТовара = 0;
	Возврат Склад;
КонецФункции

#КонецОбласти