Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ОтрцитальныеОстатки = ПроверитьНаОтрицательныеОстатки();	
	Если Не ОтрцитальныеОстатки.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстОшибки = СгенерироватьТекстОшибкиОНехваткеТоваровНаСкладе(ОтрцитальныеОстатки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Сгенерировать текст ошибки о нехватке товаров на складе.
// 
//  Массив - Массив Из Структура:
//  * Остаток - Число
//  * ОстаткиТоваровНаСкладахОстаткиТовар - СправочникСсылка.Товар
// 
// Возвращаемое значение:
//  Строка
Функция СгенерироватьТекстОшибкиОНехваткеТоваровНаСкладе(МассивОтрицательныхОстатков)
	ТекстОшибки = "На складе " + Склад.Наименование + " Не хватает:";
	Для Каждого ОтрицательныйТовар Из МассивОтрицательныхОстатков Цикл
		Товар = ОтрицательныйТовар.ОстаткиТоваровНаСкладахОстаткиТовар.Наименование;
		НеХватает = ОтрицательныйТовар.Остаток * -1;
		ШаблонОшибки = "Товара: %1. В количестве %2";
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(ШаблонОшибки, Товар, НеХватает) + Символы.ПС;
	КонецЦикла;
	Возврат ТекстОшибки;
КонецФункции

// Проверить на отрицательные остатки.
// 
// Возвращаемое значение:
//  Массив - Массив Из Структура:
//  * Остаток - Число
//  * ОстаткиТоваровНаСкладахОстаткиТовар - СправочникСсылка.Товар
Функция ПроверитьНаОтрицательныеОстатки()	
	МассивОтрицательныхОстатков = Новый Массив;	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|(СУММА(Остатки.КоличествоОстаток) - СУММА(ТоварыДокумента.КоличествоТовара)) КАК Остаток,
	|Остатки.Склад КАК ОстаткиТоваровНаСкладахОстаткиСклад,
	|Остатки.Товар КАК ОстаткиТоваровНаСкладахОстаткиТовар
	|ИЗ Документ.ИзъятиеТовараСоСклада КАК ИзъятиеТовараСоСклада
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзъятиеТовараСоСклада.Товары КАК ТоварыДокумента
	|ПО ИзъятиеТовараСоСклада.Ссылка = ТоварыДокумента.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровНаСкладах.Остатки КАК Остатки
	|ПО ИзъятиеТовараСоСклада.Склад = Остатки.Склад И ТоварыДокумента.Товар = Остатки.Товар
	|ГДЕ ИзъятиеТовараСоСклада.Ссылка = &СсылкаДокумента
	|СГРУППИРОВАТЬ ПО Остатки.Склад, Остатки.Товар
	|ИМЕЮЩИЕ СУММА(Остатки.КоличествоОстаток) - СУММА(ТоварыДокумента.КоличествоТовара) < 0";
	Запрос.УстановитьПараметр("СсылкаДокумента", Ссылка);
	РезультатЗапоса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапоса.Следующий() Цикл		
		ОтрицательныйОстаток = Новый Структура;
		ОтрицательныйОстаток.Вставить("Остаток", РезультатЗапоса.Остаток);
		ОтрицательныйОстаток.Вставить("ОстаткиТоваровНаСкладахОстаткиТовар", РезультатЗапоса.ОстаткиТоваровНаСкладахОстаткиТовар);
		МассивОтрицательныхОстатков.Добавить(ОтрицательныйОстаток);
	КонецЦикла;		
	Возврат МассивОтрицательныхОстатков;
КонецФункции

Процедура СгенерироватьGuid()
	Номер = МодульПримитивовКлиентСервер.СгенерироватьGuid();	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	МассивОшибок = Новый Массив;
	МассивОшибок = ДобавитьВМассивОшибкуЕслиЕсть(МассивОшибок, ПроверитьЗаполнениеСклада());	
	МассивОшибок = ДобавитьВМассивОшибкуЕслиЕсть(МассивОшибок, ПроверитьНаличиеТоваров());	
	Если СодержитОшибки(МассивОшибок) Тогда
		Отказ = Истина;
		ТекстОшибки = СгенерироватьСтрокуОшибокИзСтроки(МассивОшибок);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	СгенерироватьGuid();
КонецПроцедуры

// Проверить заполнение склада.
// 
// Возвращаемое значение:
//  Строка - Строка
Функция ПроверитьЗаполнениеСклада()	
	Если Склад = Справочники.Склады.ПустаяСсылка() Тогда
		Возврат "Склад документа не определен. Его нужно определить.";		
	КонецЕсли;	
	Возврат "";
КонецФункции

// Проверить наличие товаров.
// 
// Возвращаемое значение:
//  Строка - Строка
Функция ПроверитьНаличиеТоваров()
	Если Товары.Количество() <= 0 Тогда
		Возврат "В документе должна быть информация о товаре";
	КонецЕсли;
	Возврат "";
КонецФункции

// Добавить в массив ошибку если есть.
// 
// Параметры:
//  Массив - Массив из Строка
//  СтрокаОшибки - Строка
// 
// Возвращаемое значение:
//  Массив - Массив из Строка
Функция ДобавитьВМассивОшибкуЕслиЕсть(Массив, СтрокаОшибки)
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		Массив.Добавить(СтрокаОшибки)		
	КонецЕсли;
	Возврат Массив;
КонецФункции

// Содержит ошибки.
// 
// Параметры:
//  МассивОшибок - Массив из Строка
// 
// Возвращаемое значение:
//  Булево
Функция СодержитОшибки(МассивОшибок)
	Возврат МассивОшибок.Количество() > 0;
КонецФункции

// Сгенерировать строку ошибок из строки.
// 
// Параметры:
//  МассивОшибок - Массив из Строка
// 
// Возвращаемое значение:
//  Строка
Функция СгенерироватьСтрокуОшибокИзСтроки(МассивОшибок)
	СтрокаОшибки = "Список ошибок:" + Символы.ПС;	
	Для Каждого Строка Из МассивОшибок Цикл		
		СтрокаОшибки = СтрокаОшибки + Строка + Символы.ПС;;
	КонецЦикла;
	Возврат СтрокаОшибки;
КонецФункции