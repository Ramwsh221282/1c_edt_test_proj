// @strict-types

#Область СоздатьДокументПоступлениияТовараНаСкладUseCase

// Создать документ поступления товара на склад.
// 
// Параметры:
//  Запрос - Структура:
//  * СсылкаДокумента - ДокументСсылка.ПоступлениеТовараНаСклад
//  * СкладСсылка - СправочникСсылка.Склады
//  * КоллекцияТоваров - Массив Из ДанныеФормыКоллекция:
//  ** Товар - СправочникСсылка.Товар
//  ** ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
//  ** КоличествоТовара - Число
//  ** ЦенаПокупки - Число
//  ** ЦенаПродажи - Число
//  ** Спред - Число
// 
// Возвращаемое значение:
//  
Функция СоздатьДокументПоступленияТовараНаСклад(Запрос)
	Документ = Запрос.СсылкаДокумента.ПолучитьОбъект();
	Документ.Номер = МодульПримитивовКлиентСервер.СгенерироватьGuid();
	Документ.Проведен = Истина;
	Документ.Записать();
КонецФункции

// Ответ создать документ поступлени товара на склад.
// 
// Параметры:
//  ДокументОбъект - ДокументО
// 
// Возвращаемое значение:
//  
Функция ОтветСоздатьДокументПоступлениТовараНаСклад(ДокументОбъект)
	
КонецФункции

#КонецОбласти

#Область УдалитьТоварСоСкладаUseCase

// Удалить товар со склада.
// 
// Параметры:
//  Запрос - Структура:
//   * СсылкаСклад - СправочникСсылка.Склады
//   * СсылкаТовараСклада - СправочникСсылка.Товар
// 
// Возвращаемое значение:
//  Структура - Удалить товар со склада:
// * СкладСсылка - СправочникСсылка.Склады 
Функция УдалитьТоварСоСклада(Запрос) Экспорт
	СсылкаТовара = Запрос.СсылкаТовараСклада;
	СсылкаСклада = Запрос.СсылкаСклад;
	ОбъектСклада = СсылкаСклада.ПолучитьОбъект();
	Количество = ОбъектСклада.ТоварыНаСкладе.Количество();
	Для Счетчик = 0 По Количество - 1 Цикл
		ТоварСклада = ОбъектСклада.ТоварыНаСкладе.Получить(Счетчик);
		Если ТоварСклада.Товар = СсылкаТовара Тогда			
			ОбъектСклада.ТоварыНаСкладе.Удалить(Счетчик);			
			ПересчитатьОбщееКоличествоТовараНаСкладе(ОбъектСклада);
			ОбъектСклада.Записать();
			Возврат УдалитьТоварСоСкладаОтвет(ОбъектСклада);
		КонецЕсли;
	КонецЦикла;
	ВызватьИсключениеТоварСкладаНеНайден();
КонецФункции

Процедура ВызватьИсключениеТоварСкладаНеНайден()
	Ошибка = "У склада не был найден данный товар.";
	ВызватьИсключение Ошибка;
КонецПроцедуры

// Удалить товар со склада ответ.
// 
// Параметры:
//  СкладОбъект - СправочникОбъект.Склады
// Возвращаемое значение:
//  Структура:
//	 * СкладСсылка - СправочникСсылка.Склады
Функция УдалитьТоварСоСкладаОтвет(СкладОбъект)
	Ответ = Новый Структура;
	Ответ.Вставить("СкладСсылка", СкладОбъект.Ссылка);	
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область СохранитьТоварыСкладаUseCase

// Сохранить товары склада.
// 
// Параметры:
//  Запрос - Структура:
//  * СсылкаСклада - СправочникСсылка.Склады
//  * СписокТоваров - Массив из Структура:
//  ** СсылкаТовара - СправочникСсылка.Товар
//  ** ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
//  ** ЦенаПокупки - Число
//  ** ЦенаПродажи - Число
//  ** Спред - Число
//  ** Количество - Число
// Возвращаемое значение:
//  Структура - Ответ сохранить товары склада:
// * СкладСсылка - СправочникСсылка.Склады  
Функция СохранитьТоварыСклада(Запрос) Экспорт
	Если Запрос.СписокТоваров.Количество() = 0 Тогда
		ВызватьИсключениеНечегоСохранятьНаСкладе();
	КонецЕсли;
	СкладОбъект = Запрос.СсылкаСклада.ПолучитьОбъект();	
	СтрокаПоТовару = Новый Соответствие;
	Для Каждого ТоварТабличнаяЧасть Из СкладОбъект.ТоварыНаСкладе Цикл
		СтрокаПоТовару.Вставить(ТоварТабличнаяЧасть.Товар, ТоварТабличнаяЧасть);		
	КонецЦикла;	
	Для Каждого ТоварСтруктура Из Запрос.СписокТоваров Цикл
		СуществующийТовар = СтрокаПоТовару.Получить(ТоварСтруктура.СсылкаТовара);
		Если СуществующийТовар = Неопределено Тогда
			ДобавитьТоварСкладу(СкладОбъект, ТоварСтруктура);
		Иначе
			ПрименитьСтруктуруКТоваруСклада(СуществующийТовар, ТоварСтруктура);
		КонецЕсли;		
	КонецЦикла;	
	ПересчитатьОбщееКоличествоТовараНаСкладе(СкладОбъект);	
	СкладОбъект.Записать();	
	Возврат ОтветСохранитьТоварыСклада(СкладОбъект);
КонецФункции

// Пересчитать общее количество товара на складе.
// 
// Параметры:
//  СкладОбъект - СправочникОбъект.Склады
Процедура ПересчитатьОбщееКоличествоТовараНаСкладе(СкладОбъект)
	ОбщееКоличество = СкладОбъект.ТоварыНаСкладе.Итог("Количество");
	СкладОбъект.КоличествоТовара = ОбщееКоличество;
КонецПроцедуры

// Ответ сохранить товары склада.
// 
// Параметры:
//  СкладОбъект - СправочникОбъект.Склады
// 
// Возвращаемое значение:
//  Структура - Ответ сохранить товары склада:
// * СкладСсылка - СправочникСсылка.Склады
Функция ОтветСохранитьТоварыСклада(СкладОбъект)
	Ответ = Новый Структура;
	Ответ.Вставить("СкладСсылка", СкладОбъект.Ссылка);
	Возврат Ответ;
КонецФункции

// Существующий Товар.
// 
// Параметры:
//  СкладОбъект - СправочникОбъект.Склады
//  ТоварыСклада - ТаблицаЗначений:
//  ТоварСтруктура - Структура:
// * СсылкаТовара - СправочникСсылка.Товар
// * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
// * ЦенаПокупки - Число
// * ЦенаПродажи - Число 
// * Спред - Число
// * Количество - Число
Процедура ДобавитьТоварСкладу(СкладОбъект, ТоварСтруктура)
	ДобавляемыйТовар = СкладОбъект.ТоварыНаСкладе.Добавить();
	ДобавляемыйТовар.ЕдиницаИзмерения = ТоварСтруктура.ЕдиницаИзмерения;
	ДобавляемыйТовар.Количество = ТоварСтруктура.Количество;
	ДобавляемыйТовар.Спред = ТоварСтруктура.Спред;
	ДобавляемыйТовар.Товар = ТоварСтруктура.СсылкаТовара;
	ДобавляемыйТовар.ЦенаПокупки = ТоварСтруктура.ЦенаПокупки;
	ДобавляемыйТовар.ЦенаПродажи = ТоварСтруктура.ЦенаПродажи;		
КонецПроцедуры

// Применить Структуру К Товару Склада.
// 
// Параметры:
//  СуществующийТовар - СправочникТабличнаяЧасть.Склады.ТоварыНаСкладе
//  ТоварСтруктура - Структура:
//  * СсылкаТовара - СправочникСсылка.Товар
//  * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения
//  * ЦенаПокупки - Число
//  * ЦенаПродажи - Число
//  * Спред - Число
//  * Количество - Число
Процедура ПрименитьСтруктуруКТоваруСклада(СуществующийТовар, ТоварСтруктура)
	СуществующийТовар.ЕдиницаИзмерения = ТоварСтруктура.ЕдиницаИзмерения;
	СуществующийТовар.Количество = ТоварСтруктура.Количество;
	СуществующийТовар.Спред = ТоварСтруктура.Спред;
	СуществующийТовар.Товар = ТоварСтруктура.СсылкаТовара;
	СуществующийТовар.ЦенаПокупки = ТоварСтруктура.ЦенаПокупки;
    СуществующийТовар.ЦенаПродажи = ТоварСтруктура.ЦенаПродажи;
КонецПроцедуры

Процедура ВызватьИсключениеНечегоСохранятьНаСкладе()
	Ошибка = "Для склада нечего сохранять в рамках товаров.";
	ВызватьИсключение Ошибка;
КонецПроцедуры

#КонецОбласти

#Область СоздатьПустойСкладUseCase

// Создать пустой склад сервер.
// 
// Параметры:
//  Запрос - Структура:
// * НаименованиеСклада - Строка
// * АдресСклада - Строка
// 
// Возвращаемое значение:
//  Структура - Ответ создать пустой склад:
// * СкладСсылка - СправочникСсылка.Склады  
Функция СоздатьПустойСкладСервер(Запрос) Экспорт
	НаименованиеСклада = Запрос.НаименованиеСклада;
	АдресСклада = Запрос.АдресСклада;
	Если ПустаяСтрока(НаименованиеСклада) Тогда
		ВызватьИсключениеПустоеНазваниеСклада();
	КонецЕсли;
	Если ПустаяСтрока(АдресСклада) Тогда
		ВызватьИсключениеПустойАдресСклада();
	КонецЕсли;
	ПроверитьСкладНаДубликат(НаименованиеСклада, АдресСклада);
	Склад = СоздатьОбъектПустойСклад(НаименованиеСклада, АдресСклада);
	Склад.Записать();
	Возврат ОтветСоздатьПустойСклад(Склад);
КонецФункции

// Ответ создать пустой склад.
// 
// Параметры:
//  Склад - СправочникОбъект.Склады
// 
// Возвращаемое значение:
//  Структура - Ответ создать пустой склад:
// * СкладСсылка - СправочникСсылка.Склады
Функция ОтветСоздатьПустойСклад(Склад)
	Ответ = Новый Структура;
	Ответ.Вставить("СкладСсылка", Склад.Ссылка);
	Возврат Ответ;
КонецФункции

// Проверить склад на дубликат.
// 
// Параметры:
//  НаименованиеСклада - Строка
//  АдресСклада - Строка
Процедура ПроверитьСкладНаДубликат(НаименованиеСклада, АдресСклада)	
	ЗапросВБазу = Новый Запрос;
	ЗапросВБазу.Текст = 
	"ВЫБРАТЬ 
	|Склады.Наименование КАК Наименование,
	|Склады.Адрес КАК Адрес
	|ИЗ Справочник.Склады КАК Склады
	|ГДЕ Склады.Наименование = &Наименование И Склады.Адрес = &Адрес";
	ЗапросВБазу.УстановитьПараметр("Наименование", НаименованиеСклада);
	ЗапросВБазу.УстановитьПараметр("Адрес", АдресСклада);
	РезультатЗапроса = ЗапросВБазу.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ВызватьИсключениеДубликатСкладаПоИмениИАдресу(НаименованиеСклада, АдресСклада);
	КонецЕсли;
КонецПроцедуры

// Вызвать исключение дубликат склада по имени и адресу.
// 
// Параметры:
//  НаименованиеСклада - Строка
//  АдресСклада - Строка
Процедура ВызватьИсключениеДубликатСкладаПоИмениИАдресу(НаименованиеСклада, АдресСклада)
	Ошибка = СтрШаблон("Склад с названием %1 и адресом %2 уже существует.", НаименованиеСклада, АдресСклада);
	ВызватьИсключение Ошибка;	
КонецПроцедуры

Процедура ВызватьИсключениеПустоеНазваниеСклада()
	Ошибка = "Название склада не было указано.";
	ВызватьИсключение(Ошибка);
КонецПроцедуры

Процедура ВызватьИсключениеПустойАдресСклада()
	Ошибка = "Адрес склада был пустым";
	ВызватьИсключение(Ошибка);
КонецПроцедуры

// Создать объект пустой склад.
// 
// Параметры:
//  НаименованиеСклада - Строка
//  АдресСклада - Строка
// 
// Возвращаемое значение:
//  СправочникОбъект.Склады - Создать объект пустой склад
Функция СоздатьОбъектПустойСклад(НаименованиеСклада, АдресСклада)
	Склад = Справочники.Склады.СоздатьЭлемент();
	Склад.Код = МодульПримитивовКлиентСервер.СгенерироватьGuid();
	Склад.Наименование = НаименованиеСклада;
	Склад.Адрес = АдресСклада;
	Склад.КоличествоТовара = 0;
	Возврат Склад;
КонецФункции

#КонецОбласти